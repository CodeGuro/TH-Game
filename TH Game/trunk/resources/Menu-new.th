#TouhouDanmaku[ menu ]

script_main menu
{
	let dir = GetCurrentScriptDirectory();
	let menu_created = false;
	let musicPlaying = false;
	@Initialize
	{
		SetSoundVolume( 100 );
		LoadSound( dir ~ "Title.wav" );
		LoadSound( dir ~ "se/se_select00.wav" );
		LoadSound( dir ~ "se/se_ok00.wav" );
		LoadTexture( dir ~ "img/logo.jpg" );
		LoadTexture( dir ~ "img/menu.jpg" );
		LoadTexture( dir ~ "img/etama2.png" );
		Start();
	}
	@MainLoop
	{
		yield;
	}
	@Finalize
	{
	}
	task Start()
	{
		// LogoScreen();
		PlaySound( dir ~ "Title.wav" );
		MenuScreen();
	}
	function SetQuadCenterScreen( let obj, let width, let height )
	{

		ObjEffect_SetLayer( obj, 6 );
		Obj_SetPosition( obj, 640 / 2, 480 / 2 );
		ObjEffect_CreateVertex( obj, 4 );
		ObjEffect_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
		ObjEffect_SetVertexXY( obj, 0, -width / 2, -height / 2 );
		ObjEffect_SetVertexXY( obj, 1, width / 2, -height / 2 );
		ObjEffect_SetVertexXY( obj, 2, -width / 2, height / 2 );
		ObjEffect_SetVertexXY( obj, 3, width / 2, height / 2 );
		ObjEffect_SetVertexUV( obj, 0, 0/width, 0/height );
		ObjEffect_SetVertexUV( obj, 1, width / width, 0 / height );
		ObjEffect_SetVertexUV( obj, 2, 0 / width, height / height );
		ObjEffect_SetVertexUV( obj, 3, width / width, height / height );
	}
	function LogoScreen()
	{
		let obj = Obj_Create( OBJ_EFFECT );
		SetQuadCenterScreen( obj, 640, 480 );
		ObjEffect_SetTexture( obj, dir ~ "img/logo.jpg" );
		let timer = 0;
		let color = 0;
		loop( 600 )
		{
			let i = 0;
			if( color < 255 && timer < 300 )
			{
				color = color + 3;
			}
			else if( timer > 300 && color > 0 )
			{
				color = color - 1.5;
				if( color <= 0 ){ break; }
			}
			loop( 4 )
			{
				ObjEffect_SetVertexColor( obj, i, color, color, color, 255 );
				i = i + 1;
			}
			timer = timer + 1;
			yield;
		}
		Obj_Delete( obj );
		
	}
	function CreateFontObject( let x, let y, let text )
	{
		let obj = Obj_Create( OBJ_FONT );
		Obj_SetPosition( obj, x, y );
		ObjFont_SetString( obj, text );
		ObjFont_SetRect( obj, x, y, x + 250, y + 200 );
		ObjFont_SetColor( obj, 255, 255, 255, 255 );
		ObjFont_SetSize( obj, 32 );
		ObjFont_SetFaceName( obj, "Tahoma" );
		Obj_SetAutoDelete( obj, false );
		return obj;
	}
	task MenuScreen()
	{
		if( menu_created == false )
		{
			menu_created = true;
			let obj = Obj_Create( OBJ_EFFECT );
			SetQuadCenterScreen( obj, 640, 480 );
			ObjEffect_SetTexture( obj, dir ~ "img/menu.jpg" );
			let i = 0;
			while( i < 4 )
			{
				ObjEffect_SetVertexColor( obj, i, 255, 255, 255, 255 );
				i = i + 1;
			}
		}
		let font_x = 50;
		let font_y = 250;
		let y_dis = 30;
		let start =				CreateFontObject( font_x, font_y + y_dis * 0, "Start" );
		let practice_start =	CreateFontObject( font_x, font_y + y_dis * 1, "Practice Start" );
		let spell_practice =	CreateFontObject( font_x, font_y + y_dis * 2, "Spell Practice" );
		let music_room =		CreateFontObject( font_x, font_y + y_dis * 3, "Music Room" );
		let option =			CreateFontObject( font_x, font_y + y_dis * 4, "Option" );
		let quit =				CreateFontObject( font_x, font_y + y_dis * 5, "Quit" );
		let key_up = 38;
		let key_down = 40;
		let options = [ start, practice_start, spell_practice, music_room, option, quit ];
		let option_select = 0;
		ascent( i in 0..length( options ) )
		{
			let o = options[ i ];
			Obj_SetPosition( o, font_x, font_y + y_dis * i );
		}
		let time = 0;
		let red;
		let green;
		let blue;
		let selected = false;
		while( !selected )
		{
			let t2 = time / 60;
			red = 255 * cos( t2 );
			if( red < 0){ red = -red;}
			green = 255 * cos( 2 * PI / 3 + t2 );
			if( green < 0 ){ green = -green;}
			blue = 255 * cos( PI + t2 );
			if( blue < 0 ){ blue = -blue; }
			time = time + 1;
			ObjFont_SetColor( options[ option_select ], red, green, blue, 255 );
			let down_pressed = KeyPressed( key_down );
			let up_pressed = KeyPressed( key_up );
			if( down_pressed || up_pressed )
			{
				PlaySound( dir ~ "se/se_select00.wav" );
				ObjFont_SetColor( options[ option_select ], 255, 255, 255, 255 );	
				if( down_pressed )
				{
					option_select = option_select + 1;
				}
				else
				{
					option_select = option_select - 1;
				}
				if( option_select < 0 ){ option_select = 5; }
				option_select = option_select % 6;

				OptionEffect( options[ option_select ] );

			}
			if( KeyPressed( 90 ) )
			{
				selected = true;
				PlaySound( dir ~ "se/se_ok00.wav" );
				let select = options[ option_select ];
				if( select == quit ){ loop( 35 ){ yield; } TerminateProgram; }
				if( select == start ){ loop( 35 ){ yield; } StartStage; break; }
			}
			yield;
		}
		
		//deletion of items
		ascent( i in 0..length( options ) )
		{
			Obj_Delete( options[ i ] );
		}
	}
	function CreateLeaf()
	{
		let leaf = Obj_Create( OBJ_EFFECT );
		ObjEffect_SetLayer( leaf, 6 );
		Obj_SetAutoDelete( leaf, true );
		ObjEffect_CreateVertex( leaf, 4 );
		ObjEffect_SetPrimitiveType( leaf, PRIMITIVE_TRIANGLESTRIP );
		ObjEffect_SetTexture( leaf, dir ~ "img/etama2.png" );
		
		let left = 95/256;
		let right = 130/256;
		let top = 176/256;
		let bottom = 209/256;
		ObjEffect_SetVertexUV( leaf, 0, left, top );
		ObjEffect_SetVertexUV( leaf, 1, right, top );
		ObjEffect_SetVertexUV( leaf, 2, left, bottom );
		ObjEffect_SetVertexUV( leaf, 3, right, bottom );

		ObjEffect_SetVertexXY( leaf, 0, (left-right)*128, (top-bottom)*128 );
		ObjEffect_SetVertexXY( leaf, 1, (right-left)*128, (top-bottom)*128 );
		ObjEffect_SetVertexXY( leaf, 2, (left-right)*128, (bottom-top)*128 );
		ObjEffect_SetVertexXY( leaf, 3, (right-left)*128, (bottom-top)*128 );

		ascent( i in 0..4 )
		{
			ObjEffect_SetVertexColor( leaf, i, 255, 255, 255, 255 );
		}

		return leaf;
	}
	task OptionEffect( let obj )
	{
		let posx = Obj_GetX( obj );
		let posy = Obj_GetY( obj );
		let leafCount = rand_int( 5, 10 );
		let leaves = [];
		let y_vels = [];
		let x_vels = [];
		let y_accels = [];
		let y_maxVels = [];
		let angular_vels = [];

		// create the leaves
		ascent( i in 0..leafCount-1 )
		{
			let leaf = CreateLeaf();
			ObjEffect_SetLayer( leaf, 6 );
			Obj_SetPosition( leaf, posx + rand_int( 0, 100 ), posy + rand_int( -5, 5 ) );
			appendArray( leaves, leaf );
			appendArray( x_vels, rand_norm( 0, 1 ) );
			appendArray( y_vels, rand( -13, -6 ) );
			appendArray( y_accels, rand( 0.2, 1.5 ) );
			appendArray( y_maxVels, rand_norm( 2, 0.5 ) );
			appendArray( angular_vels, rand( -2*PI/60, 2*PI/60 ) );
		}
				
		// each leaf falls down
		loop
		{
			yield;
			let allDeleted = true;
			ascent( i in 0..length( leaves ) )
			{
				let leaf = leaves[ i ];
				if( !Obj_BeDeleted( leaf ) )
				{
					allDeleted = false;
					
					Obj_SetPosition( leaf, Obj_GetX( leaf ) + x_vels[ i ], Obj_GetY( leaf ) + y_vels[ i ] );
					if( y_vels[ i ] < y_maxVels[ i ] )
					{
						y_vels[ i ] = y_vels[ i ] + y_accels[ i ];
					}
					
					Obj_SetAngle( leaf, Obj_GetAngle( leaf ) + angular_vels[ i ] );

					if( Obj_GetY( leaf ) > 680 )
					{
						Obj_Delete( leaf );
					}
				}
			}
			
			if( allDeleted )
			{
				break;
			}
		}


	}
	task StartStage
	{
		StopSound( dir ~ "Title.wav" );
		LaunchScriptFromFile( dir ~ "stage.th", 0 );
		TerminateScript();
	}
}