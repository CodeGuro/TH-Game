#TouhouDanmaku[ Player ]

script_main main_script
{
	let ObjPlayer;
	let vulnerable;
	let hit;
	let x;
	let y;
	@Initialize
	{
		x = 240;
		y = 400;
		hit = false;
		vulnerable = true;
		PlayerGraphic();
		FireShot();
		SetFog( 0.000001, 0.9999, 255, 255, 255 )
	}
	@MainLoop
	{
		let dx = 2;
		let dy = 2;
		if( !hit )
		{
			if( KeyDown( 38 ) )//up
			{
				if( y > 16 )
				{
					y = y - dy;
				}
			}
			else if( KeyDown( 40 ) ) //down
			{
				if( y < 464 )
				{
					y = y + dy;
				}
			}
			if( KeyDown( 37 ) ) //left
			{
				if( x > 32 )
				{
					x = x - dx;
				}
			}
			else if( KeyDown( 39 ) ) //right
			{
				if( x < 416 )
				{
					x = x + dx;
				}
			}
			Obj_SetPosition( ObjPlayer, x, y );
		}
		yield;
	}
	@Hit
	{
		if( !hit )
		{
			if( vulnerable )
			{
				hit = true;
				HitEvent();
			}
		}
	}
	@Finalize
	{
	}
	task FireShot()
	{
		let imgW = 256;
		let imgH = 256;
		let _y = 144 + 1;
		let _x = 0;
		let uw = 64;
		let uh = 16;
		loop
		{
			if( KeyDown( 90 ) )
			{
				let objShot = Obj_Create( OBJ_EFFECT );
				Obj_SetAutoDelete( objShot, true );
				Obj_SetPosition( objShot, Obj_GetX( ObjPlayer ), Obj_GetY( ObjPlayer ) );
				Obj_SetAngle( objShot, -PI/2 );
				Obj_SetSpeed( objShot,  15 );
				ObjEffect_SetTexture( objShot, GetCurrentScriptDirectory ~ "player00.png" );
				ObjEffect_CreateVertex( objShot, 4 );
				ObjEffect_SetPrimitiveType( objShot, PRIMITIVE_TRIANGLESTRIP );
				ascent( i in 0..4 )
				{
					ObjEffect_SetVertexColor( objShot, i, 255, 255, 255, 255 );
				}
				ObjEffect_SetVertexXY( objShot, 0, -uw/2, -uh/2 );
				ObjEffect_SetVertexXY( objShot, 1, uw/2, -uh/2 );
				ObjEffect_SetVertexXY( objShot, 2, -uw/2, uh/2 );
				ObjEffect_SetVertexXY( objShot, 3, uw/2, uh/2 );
				ObjEffect_SetVertexUV( objShot, 0, _x/imgW, _y/imgH );
				ObjEffect_SetVertexUV( objShot, 1, (_x+uw)/imgW, _y/imgH );
				ObjEffect_SetVertexUV( objShot, 2, _x/imgW, (_y+uh)/imgH );
				ObjEffect_SetVertexUV( objShot, 3, (_x+uw)/imgW, (_y+uh)/imgH );

				loop( 4 ){ yield; }
			}
			yield;
		}

	}
	task PlayerGraphic()
	{
		function SetSpriteRect( let obj, let _x, let _y, let w, let h, let uw, let uh )
		{
			ascent( i in 0..2 )
			{
				ObjEffect_SetVertexUV( obj, i*2, _x/uw, (_y + h*i)/uh );
				ObjEffect_SetVertexUV( obj, i*2+1, (_x+w)/uw, (_y + h*i)/uh );
			}
			ObjEffect_SetVertexXY( obj, 0, -w/2, -h/2 );
			ObjEffect_SetVertexXY( obj, 1, w/2, -h/2 );
			ObjEffect_SetVertexXY( obj, 2, -w/2, h/2 );
			ObjEffect_SetVertexXY( obj, 3, w/2, h/2 );
		}
		function SetSpriteRectMirror( let obj, let _x, let _y, let w, let h, let uw, let uh )
		{
			ascent( i in 0..2 )
			{
				ObjEffect_SetVertexUV( obj, i*2, (_x+w)/uw, (_y + h*i)/uh );
				ObjEffect_SetVertexUV( obj, i*2+1, _x/uw, (_y + h*i)/uh );
			}
			ObjEffect_SetVertexXY( obj, 0, -w/2, -h/2 );
			ObjEffect_SetVertexXY( obj, 1, w/2, -h/2 );
			ObjEffect_SetVertexXY( obj, 2, -w/2, h/2 );
			ObjEffect_SetVertexXY( obj, 3, w/2, h/2 );
		}
		task Idle()
		{
			let Timer = 0;
			loop
			{
				SetSpriteRect( ObjPlayer, 1 + floor(Timer / 8 ) * 32, 1, 32, 48, 256, 256 );
				Timer = (Timer + 1) % 32;
				yield;
				if( KeyDown( 39 ) || KeyDown( 37 ) )
				{
					break;
				}
			}
		}
		task SwerveLeft()
		{
			let Timer = 0;
			loop
			{
				SetSpriteRect( ObjPlayer, 1 + floor(Timer / 8 ) * 32, 1 + 48, 32, 48, 256, 256 );
				Timer = Timer + 1;
				if( Timer >= 56 ){ Timer = 24; }
				yield;
				if( !KeyDown( 37 ) )
				{
					break;
				}
			}
		}
		task SwerveRight()
		{
			let Timer = 0;
			loop
			{
				SetSpriteRectMirror( ObjPlayer, 1 + floor(Timer / 8 ) * 32, 1 + 48, 32, 48, 256, 256 );
				Timer = Timer + 1;
				if( Timer >= 56 ){ Timer = 24; }
				yield;
				if( !KeyDown( 39 ) )
				{
					break;
				}
			}
		}
		let Radius = 8;
		LoadTexture( GetCurrentScriptDirectory ~ "player00.png" );
		ObjPlayer = Obj_Create( OBJ_EFFECT );
		Obj_SetPosition( ObjPlayer, x, y );
		ObjEffect_SetLayer( ObjPlayer, 3 );
		Obj_ScriptLatch( ObjPlayer );
		ObjEffect_SetTexture( ObjPlayer, GetCurrentScriptDirectory ~ "player00.png" );
		ObjEffect_CreateVertex( ObjPlayer, 4 );
		ObjEffect_SetPrimitiveType( ObjPlayer, PRIMITIVE_TRIANGLESTRIP );
		ascent( i in 0..4 )
		{
			ObjEffect_SetVertexColor( ObjPlayer, i, 255, 255, 255, 255 );
		}
		let animation = -1;
		while( !Obj_BeDeleted( ObjPlayer ) )
		{
			if( KeyDown( 37 ) ) //left
			{
				if( animation != 2 )
				{
					SwerveLeft();
					animation = 2;
				}
			}
			else if( KeyDown( 39 ) ) //right
			{
				if( animation != 1 )
				{
					SwerveRight();
					animation = 1;
				}
			}
			else //default
			{
				if( animation != 0 )
				{
					Idle();
					animation = 0;
				}
			}
			yield;
		}
	}
	task HitEvent()
	{
		vulnerable = false;
		let pchuun = GetCurrentScriptDirectory ~ "se_pldead00.wav";
		let border_of_life = GetCurrentScriptDirectory ~ "etama3.png";
		let vtxcount = 24;
		let radius = 150;
		let radius_init = radius;
		let width = 32;
		radius = radius - width/2;
		LoadSound( pchuun );
		PlaySound( pchuun );
		let ObjCircle = Obj_Create( OBJ_EFFECT );
		Obj_SetPosition( ObjCircle, x, y );
		LoadTexture( border_of_life );
		ObjEffect_SetTexture( ObjCircle, border_of_life );
		ObjEffect_CreateVertex( ObjCircle, vtxcount );
		ObjEffect_SetPrimitiveType( ObjCircle, PRIMITIVE_TRIANGLESTRIP );
		ascent( i in 0 .. vtxcount/2 )
		{
			ObjEffect_SetVertexUV( ObjCircle, i*2, 80/128, (i/(vtxcount/2-1)) );
			ObjEffect_SetVertexUV( ObjCircle, i*2+1, 96/128, (i/(vtxcount/2-1)) );
		}
		ascent( i in 0 .. vtxcount )
		{
			ObjEffect_SetVertexColor( ObjCircle, i, 255, 255, 255, 255/1.5 );
		}
		let timer = 30;
		loop( timer )
		{
			ascent( i in 0 .. vtxcount/2 )
			{
				let ang = 2*PI *i/(vtxcount/2-1);
				ObjEffect_SetVertexXY( ObjCircle, i*2, radius * cos( ang ), radius * sin( ang ) );
				ObjEffect_SetVertexXY( ObjCircle, i*2+1, (radius+width) * cos( ang ), (radius+width) * sin( ang ) );
			}
			radius = radius - radius_init/timer;
			yield;
		}
		Obj_Delete( ObjCircle );
		x = 240;
		y = 400;
		hit = false;
		ascent( j in 0..10 )
		{
			
			ascent( i in 0..4 )
			{
				ObjEffect_SetVertexColor( ObjPlayer, i, 255, 0, 0, 255 );
			}
			loop( 8 ){ yield; }
			ascent( i in 0..4 )
			{
				ObjEffect_SetVertexColor( ObjPlayer, i, 255, 255, 255, 255 );
			}
			loop( 8 ){ yield; }
		}
		vulnerable = true;
	}
}