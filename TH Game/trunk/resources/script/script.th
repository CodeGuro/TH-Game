//A TH_DH sample script, early project
#TouhouDanmaku[single] //preprocessor to let the parser know this script is intended for TH-DH, must be within first 512 characters
                          //optional : [single] anonymous is a script enemy, [stage] anonymous is a stage, []/void - assumed [single]
#include ".\functions.th" //preprocessor for including external scripts

function foo( let val )
{
}

script_main main_script //main routine
{
	let ObjEnemy;
	let sound = GetCurrentScriptDirectory() ~ "se_tan02.wav";
	let bulletTexture = GetCurrentScriptDirectory() ~ "etama.png";
	let stgframeTexture = GetCurrentScriptDirectory() ~ "STG Frame.png";
	//@[routine name][no args] <- events are routines called during notable events
	@Initialize //routine called when the script machine initializes a new script
	{
		ObjEnemy = Obj_Create( OBJ_EFFECT );
		Obj_ScriptLatch( ObjEnemy );
		functest();
		LoadUserShotData( GetCurrentScriptDirectory() ~ "ShotData.th" );
		LoadSound( sound );
		STGFrame();
		Task();
		CreateEnemyFromScript( "youkai" );
	}
	@MainLoop //routine called every frame post-Initialize
	{
		yield;
	}
	@Finalize //routine called when the script machine terminates this script
	{
	}
	//@DrawLoop omitted, SetEnemyGraphic() functions will be used to call that
	@BackGround //routine called when the script is a stage
	{
	}
	function functest()
	{
		let arr = [];
		let arr2 = [ 0, 1, 2, 3 ];
		let a = length( arr );
		let b = length( arr2 );
	}
	task Task()
	{
		let i = 1;
		loop( 4 )
		{
			let x = 250 + 250 * i;
			let y = 50;
			loop( 15 )
			{
				let a = 0;
				let looper = 40;
				FireRound( x, y, looper, a );
				loop( 5 ){ yield; }
				x = x - 30 * i;
			}
		i = i * -1;
		wait( 30 );
		}
	}
	task FireRound( let x, let y, let looper, let a )
	{
		PlaySound( sound );
		Delay( x, y );
		loop( looper )
		{
			CreateShot01( x, y, 2, a, rand_int(2,3) );
			a = a + 2 * PI / looper;
		}

	}
	function Delay( let x, let y)
	{
		let obj = Obj_Create( OBJ_EFFECT );
		LoadTexture( bulletTexture );
		ObjEffect_SetTexture( obj, bulletTexture );

		ObjEffect_CreateVertex( obj, 6 );
		ObjEffect_SetPrimitiveType( obj, PRIMITIVE_TRIANGLELIST );
		ObjEffect_SetRenderState( obj, ALPHA_BLEND );

		ObjEffect_SetVertexUV( obj, 0, 32/256, 208/256 );
		ObjEffect_SetVertexUV( obj, 1, 64/256, 208/256 );
		ObjEffect_SetVertexUV( obj, 2, 32/256, 238/256 );
		ObjEffect_SetVertexUV( obj, 3, 64/256, 208/256 );
		ObjEffect_SetVertexUV( obj, 4, 64/256, 238/256 );
		ObjEffect_SetVertexUV( obj, 5, 32/256, 238/256 );

		ObjEffect_SetVertexXY( obj, 0, -16, -14 );
		ObjEffect_SetVertexXY( obj, 1, 16, -14 );
		ObjEffect_SetVertexXY( obj, 2, -16, 16 );
		ObjEffect_SetVertexXY( obj, 3, 16, -14 );
		ObjEffect_SetVertexXY( obj, 4, 16, 16 );
		ObjEffect_SetVertexXY( obj, 5, -16, 16 );

		ObjEffect_SetVertexColor( obj, 0, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 1, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 2, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 3, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 4, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 5, 255, 255, 255, 255 );

		Obj_SetPosition( obj, x, y );
		Obj_SetSpeed( obj, 0 );
		Obj_SetAngle( obj, PI/2 );
		let sca = 3;
		loop( 15 )
		{
			sca = sca - 1/7;
			ObjEffect_SetScale( obj, sca, sca );
			yield;
		}
		Obj_Delete( obj );
	}
	task STGFrame()
	{
		let obj = Obj_Create( OBJ_EFFECT );
		LoadTexture( stgframeTexture );
		ObjEffect_SetTexture( obj, stgframeTexture );

		ObjEffect_CreateVertex( obj, 6 );
		ObjEffect_SetPrimitiveType( obj, PRIMITIVE_TRIANGLELIST );
		ObjEffect_SetRenderState( obj, ALPHA_BLEND );

		ObjEffect_SetVertexUV( obj, 0, 0/1024, 0/512 );
		ObjEffect_SetVertexUV( obj, 1, 640/1024, 0/512 );
		ObjEffect_SetVertexUV( obj, 2, 0/1024, 480/512 );
		ObjEffect_SetVertexUV( obj, 3, 640/1024, 0/512 );
		ObjEffect_SetVertexUV( obj, 4, 640/1024, 480/512 );
		ObjEffect_SetVertexUV( obj, 5, 0/1024, 480/512 );

		ObjEffect_SetVertexXY( obj, 0, 0, 0 );
		ObjEffect_SetVertexXY( obj, 1, 640, 0 );
		ObjEffect_SetVertexXY( obj, 2, 0, 480 );
		ObjEffect_SetVertexXY( obj, 3, 640, 0 );
		ObjEffect_SetVertexXY( obj, 4, 640, 480 );
		ObjEffect_SetVertexXY( obj, 5, 0, 480 );

		ObjEffect_SetVertexColor( obj, 0, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 1, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 2, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 3, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 4, 255, 255, 255, 255 );
		ObjEffect_SetVertexColor( obj, 5, 255, 255, 255, 255 );
		ObjEffect_SetLayer( obj, 6 );
		Obj_SetPosition( obj, 0, 0 );
		Obj_SetSpeed( obj, 0 );
		while( !Obj_BeDeleted( obj ) )
		{
			yield;
		}
	}
}
function wait( let v )
{
	loop( v )
	{
		yield;
	}
}
script youkai
{
	let obj;
	@Initialize
	{
		FontTask();
		ObjShotTask();
	}
	@MainLoop
	{
		yield;
	}
	@Finalize
	{
		yield;
		Obj_Delete( obj );
	}
	task FontTask()
	{
		Font( 200, 200 );
		loop( 200 ){ yield; }
		TerminateScript();
	}
	task Font( let x, let y )
	{
		obj = Obj_Create( OBJ_FONT() );
		ObjFont_SetString( obj, "ObjFont Success!" );
		ObjFont_SetColor( obj, 255, 255, 255, 255 );
		ObjFont_SetRect( obj, x, y, x + 200, y + 200 );
		while( true )
		{
			yield;
		}
	}
	task ObjShotTask()
	{
		let num = 30;
		let a = 0;
		loop( num )
		{
			FireShot( 200, 200, a );
			a = a + 2 * PI / num;
		}
	}
	task FireShot( let x, let y, let ang )
	{
		let obj = Obj_Create( OBJ_SHOT );
		Obj_SetPosition( obj, x, y );
		Obj_SetSpeed( obj, 1 );
		Obj_SetAngle( obj, ang );
		let speed = 1;
		while( !Obj_BeDeleted( obj ) )
		{
			Obj_SetSpeed( obj, speed );
			speed = speed + 0.05;
			yield;
		}
	}
}