#TouhouDanmaku[ single ]
#include "./graphics.th"

function CreateEnemy()
{
	CreateEnemyFromFile( GetCurrentScriptDirectory() ~ "enemy.th" );
}

script_main enemy_script
{
	let dir;
	let dir_se;
	let dir_img;
	let obj;
	let vulnerable;
	@Initialize
	{
		dir = GetCurrentScriptDirectory();
		dir_se = dir ~ "se/";
		dir_img = dir ~ "img/";
		load_images();
		load_sounds();
		LoadUserShotData( dir ~ "ShotData.th" );
		vulnerable = true;
		run();
	}
	@MainLoop
	{
		yield;
	}
	@Hit
	{
		if( vulnerable )
		{
			vulnerable = false;
			hit_task();
		}
	}
	@Finalize
	{
		SetScore( GetScore() + 30 );
	}
	
	task hit_task()
	{
		PlaySound( dir_se ~ "se_enep00.wav" );
		ascent( i in 0..4 )
		{
			ObjEffect_SetVertexColor( obj, i, 255, 255, 255, 0 );
		}
		
		destroy_effect();
		Finalize();
		TerminateScript();
		
	}
	
	function destroy_effect()
	{
		let effect = Obj_Create( OBJ_EFFECT );
		Obj_SetPosition( effect, Obj_GetX( obj ), Obj_GetY( obj ) );
		ObjEffect_CreateVertex( effect, 4 );
		ObjEffect_SetPrimitiveType( effect, PRIMITIVE_TRIANGLESTRIP );
		ObjEffect_SetTexture( effect, dir_img ~ "etama2.png" );
		ascent( i in 0..4 )
		{
			ObjEffect_SetVertexColor( effect, i, 255, 255, 255, 255 );
		}
		ObjEffect_SetVertexUV( effect, 0, 192/256, 176/256 );
		ObjEffect_SetVertexUV( effect, 1, (192+64)/256, 176/256 );
		ObjEffect_SetVertexUV( effect, 2, 192/256, (176+64)/256 );
		ObjEffect_SetVertexUV( effect, 3, (192+64)/256, (176+64)/256 );
		
		ObjEffect_SetVertexXY( effect, 0, -32, -32 );
		ObjEffect_SetVertexXY( effect, 1,  32, -32 );
		ObjEffect_SetVertexXY( effect, 2, -32,  32 );
		ObjEffect_SetVertexXY( effect, 3,  32,  32 );
		
		let sca = 1;
		let time = 15;
		ascent( j in 0..time )
		{
			ascent( i in 0..4 )
			{
				ObjEffect_SetVertexColor( effect, i, 255, 255, 255, (time-j)/time*255 );
			}
			ObjEffect_SetScale( effect, sca, sca );
			sca = sca + 0.075;
			yield;
		}
	}
	
	function load_images()
	{
		LoadTexture( dir_img ~ "enemy.png" );
		LoadTexture( dir_img ~ "etama.png" );
		LoadTexture( dir_img ~ "etama2.png" );
		LoadTexture( dir_img ~ "etama3.png" );
		LoadTexture( dir_img ~ "etama4.png" );
		LoadTexture( dir_img ~ "etama5.png" );
		LoadTexture( dir_img ~ "etama6.png" );
	}
	function load_sounds()
	{
		LoadSound( dir_se ~ "se_tan00.wav" );
		LoadSound( dir_se ~ "se_tan01.wav" );
		LoadSound( dir_se ~ "se_tan02.wav" );
		LoadSound( dir_se ~ "se_option.wav" );
		LoadSound( dir_se ~ "se_opshow.wav" );
		LoadSound( dir_se ~ "se_ophide.wav" );
		LoadSound( dir_se ~ "se_item00.wav" );
		LoadSound( dir_se ~ "se_item01.wav" );
		LoadSound( dir_se ~ "se_kira00.wav" );
		LoadSound( dir_se ~ "se_kira01.wav" );
		LoadSound( dir_se ~ "se_kira02.wav" );
		LoadSound( dir_se ~ "se_graze.wav" );
		LoadSound( dir_se ~ "se_slash.wav" );
		LoadSound( dir_se ~ "se_damage00.wav" );
		LoadSound( dir_se ~ "se_damage01.wav" );
		LoadSound( dir_se ~ "se_invalid.wav" );
		LoadSound( dir_se ~ "se_enep00.wav" );
	}
	task setMovePosition( let posx, let posy, let maxSpeed, let weight )
	{
		loop
		{
			let dx = posx - Obj_GetX( obj );
			let dy = posy - Obj_GetY( obj );
			let dist = (dx*dx + dy*dy)^0.5;
			if( dist < 5 )
			{
				break;
			}
			let theta = atan2( posy - Obj_GetY( obj ), posx - Obj_GetX( obj ) );
			let speed = dist / weight;
			if( speed > maxSpeed )
			{
				speed = maxSpeed;
			}
			Obj_SetPosition( obj, Obj_GetX( obj ) + speed * cos( theta ), Obj_GetY( obj ) + speed * sin( theta ) );
			yield;
		}
	}
	function setgraphicenemy( let row, let column )
	{
		let r = column / 16;
		let l = ( column - 1 ) / 16;
		let t = ( row - 1 ) / 16;
		let b = row / 16;
		let wl = -16;
		let wr = 16;
		let wt = -16;
		let wb = 16;
		ObjEffect_SetVertexUV( obj, 0, l, t );
		ObjEffect_SetVertexUV( obj, 1, r, t );
		ObjEffect_SetVertexUV( obj, 2, l, b );
		ObjEffect_SetVertexUV( obj, 3, r, b );
		ObjEffect_SetVertexXY( obj, 0, wl, wt );
		ObjEffect_SetVertexXY( obj, 1, wr, wt );
		ObjEffect_SetVertexXY( obj, 2, wl, wb );
		ObjEffect_SetVertexXY( obj, 3, wr, wb );
	}
	task setgraphics()
	{
		obj = Obj_Create( OBJ_EFFECT );
		Obj_ScriptLatch( obj );
		ObjEffect_SetLayer( obj, 2 );
		ObjEffect_CreateVertex( obj, 4 );
		ObjEffect_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
		ObjEffect_SetTexture( obj, dir_img ~ "enemy.png" );
		ascent( i in 0..4 )
		{
			ObjEffect_SetVertexColor( obj, i, 255, 255, 255, 255 );
		}

		Obj_SetPosition( obj, 100, 100 );

		while( !Obj_BeDeleted( obj ) )
		{
			ascent( i in 1..4 )
			{
				setgraphicenemy( 1, i );
				loop( 10 ){ yield; }
			}
		}
	}
	task run()
	{
		setgraphics();
		wait( 100 );
		setMovePosition( 640/2, 480/2, 2, 50 );
		fireBullets();
	}
	task fireBullets()
	{
		// startFire();
		// streamFire();
		 fireRounds();
	}
	task fireBigBullet( let dir, let speed )
	{
		let bullet = Create2DObj( 0, 64, 0, 64, 256, 256, dir_img ~ "etama2.png" );
		ObjEffect_SetLayer( bullet, 4 );
		ObjEffect_SetRenderState( bullet, ALPHA_BLEND );
		Obj_SetAutoDelete( bullet, true );
		let ang = rand( 0, 2*PI );
		let ang_speed = rand( -2*PI, 2*PI ) * 0.01;
		Obj_SetPosition( bullet, Obj_GetX( obj ), Obj_GetY( obj ) );
		
		while( !Obj_BeDeleted( bullet ) )
		{
			Obj_SetAngle( bullet, ang );
			ang = ang + ang_speed;
			yield;
			Obj_SetPosition( bullet, Obj_GetX( bullet ) + speed * cos( dir ), Obj_GetY( bullet ) + speed * sin( dir ) );
		}
	}
	task fireRounds()
	{
		loop
		{
			let count = 15;
			ascent( i in 0..count )
			{
				fireBigBullet( i/count * 2*PI, 1.5 );
			}
			PlaySound( dir_se ~ "se_tan01.wav" );
			wait( 30 );
		}
	}
	task streamFire()
	{
		let theta = 0;

		loop( 100 )
		{
			CreateShot01( Obj_GetX( obj ), Obj_GetY( obj ), 4, PI * sin( theta ) / 2 + PI/2, 2 );
			theta = theta + 2*PI / 30;
			PlaySound( dir_se ~ "se_tan00.wav" );
			wait( 2 );
		}
	}
	task circlefire()
	{
	
		let ring = 40;
		let theta = 0;
		let ox = Obj_GetX( obj );
		let oy = Obj_GetY( obj );
		let del = 24;
		delay( ox, oy, 6, del, 3, 1 );
		loop( ring )
		{
			CreateShot01( ox, oy, 3, theta, 4 );
			theta = theta + 2*PI/ring;
		}
		PlaySound( dir_se ~ "se_tan02.wav" );
	}
	task startFire()
	{
		let interval = 10;
		loop( 3 )
		{
			circlefire();
			wait( interval );
		}
	}
	function wait( let n )
	{
		loop( n )
		{
			yield;
		}
	}
	function delay( let posx, let posy, let offset, let frames, let sizeInit, let sizeFin )
	{
		let objEff = Obj_Create( OBJ_EFFECT );
		Obj_SetPosition( objEff, posx, posy );
		ObjEffect_CreateVertex( objEff, 4 );
		ObjEffect_SetPrimitiveType( objEff, PRIMITIVE_TRIANGLESTRIP );
		ObjEffect_SetTexture( objEff, dir_img ~ "etama.png" );

		let bottom = 208 / 256;
		let top = 239 / 256;
		let left = offset*32 / 256;
		let right = (offset+1)*32 / 256;

		ObjEffect_SetVertexUV( objEff, 0, left, top );
		ObjEffect_SetVertexUV( objEff, 1, right, top );
		ObjEffect_SetVertexUV( objEff, 2, left, bottom );
		ObjEffect_SetVertexUV( objEff, 3, right, bottom );

		ObjEffect_SetVertexXY( objEff, 0, -16, -16 );
		ObjEffect_SetVertexXY( objEff, 1,  16, -16 );
		ObjEffect_SetVertexXY( objEff, 2, -16,  16 );
		ObjEffect_SetVertexXY( objEff, 3,  16,  16 );

		ascent( i in 0..4 )
		{
			ObjEffect_SetVertexColor( objEff, i, 255, 255, 255, 255 );
		}

		ObjEffect_SetScale( objEff, sizeInit, sizeInit );
		
		let frame = 0;
		loop( frames )
		{
			let sca = sizeInit - (sizeInit - sizeFin) / frames * frame;
			ObjEffect_SetScale( objEff, sca, sca );
			frame = frame + 1;
			yield;
		}

		Obj_Delete( objEff );

	}
}