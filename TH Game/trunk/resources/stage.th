#TouhouDanmaku[ stage ]
#include ".\Reimu.th"
#include ".\Enemy.th"
#include ".\Frame.th"

script_main main_script
{
	let dir;
	let dir_se;
	let dir_img;
	let pointCount;
	let playerx;
	let playery;
	
	
	@Initialize
	{
		dir = GetCurrentScriptDirectory();
		dir_se = dir ~ "se/";
		dir_img = dir ~ "img/";
		pointCount = 0;
		playerx = 240;
		playery = 400;

		load_images();
		load_sounds();
		LoadUserShotData( dir ~ "ShotData.th" );

		main_stage();
		
	}
	@MainLoop
	{
		yield;
	}

	@Finalize
	{
	}

	function load_images()
	{
		LoadTexture( dir_img ~ "enemy.png" );
		LoadTexture( dir_img ~ "etama.png" );
		LoadTexture( dir_img ~ "etama2.png" );
		LoadTexture( dir_img ~ "etama3.png" );
		LoadTexture( dir_img ~ "etama4.png" );
		LoadTexture( dir_img ~ "etama5.png" );
		LoadTexture( dir_img ~ "etama6.png" );
		LoadTexture( dir_img ~ "DefaultSTGFrame.png" );
	}

	function load_sounds()
	{
		LoadSound( dir_se ~ "se_tan00.wav" );
		LoadSound( dir_se ~ "se_tan01.wav" );
		LoadSound( dir_se ~ "se_tan02.wav" );
		LoadSound( dir_se ~ "se_option.wav" );
		LoadSound( dir_se ~ "se_opshow.wav" );
		LoadSound( dir_se ~ "se_ophide.wav" );
		LoadSound( dir_se ~ "se_item00.wav" );
		LoadSound( dir_se ~ "se_item01.wav" );
		LoadSound( dir_se ~ "se_kira00.wav" );
		LoadSound( dir_se ~ "se_kira01.wav" );
		LoadSound( dir_se ~ "se_kira02.wav" );
		LoadSound( dir_se ~ "se_graze.wav" );
		LoadSound( dir_se ~ "se_slash.wav" );
		LoadSound( dir_se ~ "se_damage00.wav" );
		LoadSound( dir_se ~ "se_damage01.wav" );
		LoadSound( dir_se ~ "se_invalid.wav" );
	}
	
	function set_frame()
	{
		let frameW = 640;
		let frameH = 480;
		let framePXW = 1024;
		let framePXH = 512;

		let frame = Obj_Create( OBJ_EFFECT );
		ObjEffect_SetLayer( frame, 6 );
		ObjEffect_CreateVertex( frame, 4 );
		ObjEffect_SetPrimitiveType( frame, PRIMITIVE_TRIANGLESTRIP );
		ObjEffect_SetTexture( frame, dir_img ~ "DefaultSTGFrame.png" );

		ObjEffect_SetVertexUV( frame, 0, 0      / framePXW, 0      / framePXH );
		ObjEffect_SetVertexUV( frame, 1, frameW / framePXW, 0      / framePXH );
		ObjEffect_SetVertexUV( frame, 2, 0      / framePXW, frameH / framePXH );
		ObjEffect_SetVertexUV( frame, 3, frameW / framePXW, frameH / framePXH );

		ObjEffect_SetVertexXY( frame, 0, -frameW / 2, -frameH / 2 );
		ObjEffect_SetVertexXY( frame, 1,  frameW / 2, -frameH / 2 );
		ObjEffect_SetVertexXY( frame, 2, -frameW / 2,  frameH / 2 );
		ObjEffect_SetVertexXY( frame, 3,  frameW / 2,  frameH / 2 );

		ascent( i in 0..4 )
		{
			ObjEffect_SetVertexColor( frame, i, 255, 255, 255, 255 );
		}

		Obj_SetPosition( frame, 640/2, 480/2 );
	}

	task set_frame_decorators()
	{
		let hiScoreFo_l = 32 + 384;
		let hiScoreFO_t = 64;

		let hiScoreFO = Obj_Create( OBJ_FONT );
		ObjFont_SetColor( hiScoreFO, 255, 255, 255, 255 );
		ObjFont_SetRect( hiScoreFO, hiScoreFo_l + 32, hiScoreFO_t, 640, 480 );
		ObjFont_SetFaceName( hiScoreFO, "Lucida Console" );

		let dx = 0;
		while( true )
		{			
			ObjFont_SetString( hiScoreFO, "HiScore:    " ~ ToString( pointCount ) );
			pointCount = pointCount + rand_int(1,100);
			yield;
		}

	}
	
	function set_floor( let floorx, let floory, let floorz )
	{
		let rows = 9;
		let cols = 9;
		let tilecount = rows*cols;
		let obj_floor = Obj_Create( OBJ_EFFECT );
		ObjEffect_SetLayer( obj_floor, 1 );
		ObjEffect_CreateVertex( obj_floor, 6 * tilecount );
		ObjEffect_SetPrimitiveType( obj_floor, PRIMITIVE_TRIANGLELIST );
		ObjEffect_SetRenderState( obj_floor, ALPHA_BLEND );
		let tex = GetCurrentScriptDirectory() ~ "img/world00.png";
		LoadTexture( tex );
		ObjEffect_SetTexture( obj_floor, tex );
		Obj_SetPosition3D( obj_floor, floorx, floory, floorz );
		let imgw = 256;
		let imgh = 256;
		ascent( j in 0..cols )
		{
			ascent( i in 0..rows )
			{
				Obj3D_SetFloorTile( obj_floor, i*rows+j, -imgw/2*(rows-1)+i*imgw, 0, -imgh/2*(cols-1)+j*imgh, imgw, imgh, 0, 0, imgw, imgh );
			}
		}
		
		let div = 3;
		let blueprint = set_forest( floorx, floory, floorz, imgw*rows, imgh*cols/div );
		
		ascent( i in 0.. div ) // div
		{
			let trees = set_forest( floorx, floory, floorz - imgh*cols/2 +(imgh*cols/div)/2 + imgh*cols/div*i, imgw*rows, imgh*cols/div );
			ascent( j in 0..ObjEffect_GetVertexCount( blueprint ) )
			{
				let xyz = ObjEffect_GetVertexXYZ( blueprint, j );
				ObjEffect_SetVertexXYZ( trees, j, xyz[0], xyz[1], xyz[2] );
			}
		}
		Obj_Delete( blueprint );
	}
	
	function set_forest( let floorx, let floory, let floorz, let floorwidth, let floorlength )
	{
		let treecount = 164;
		let obj_trees = Obj_Create( OBJ_EFFECT );
		ObjEffect_SetLayer( obj_trees, 1 );
		ObjEffect_CreateVertex( obj_trees, 6 * treecount );
		ObjEffect_SetPrimitiveType( obj_trees, PRIMITIVE_TRIANGLELIST );
		ObjEffect_SetRenderState( obj_trees, ALPHA_BLEND );
		let tex = GetCurrentScriptDirectory() ~ "img/world01.png";
		LoadTexture( tex );
		ObjEffect_SetTexture( obj_trees, tex );
		Obj_SetPosition3D( obj_trees, floorx, floory, floorz );
		let imgw = 512;
		let imgh = 512;
		
		let width = 18;
		let height = imgh;
		let uvl = imgw-width;
		let uvt = 0;
		
		let posx = 0;
		let posy = 240;
		let posz = 0;
		
		ascent( i in 0.. treecount )
		{
			let k;
			if( i % 2 == 0 )
			{
				k = 1;
			}
			else
			{
				k = -1;
			}
			
			let space = 82;
			posz = rand_int( -floorlength/2, floorlength/2 );
			let posx = k * rand_int( space, floorwidth/2 );
			let ang_rand = rand(-PI/12,PI/12);

			Obj3D_SetErectTileObj3D_SetFloorTile( obj_trees, i, posx, posy, posz,
				width, height, uvl, uvt, imgw, imgh, ang_rand );
		}
		return obj_trees
	}

	task main_stage()
	{
		SetFog( 200, 750, 128, 160, 192 );
		set_floor( 0, 0, 0 );
		Motion();
		let player_pos = [ playerx, playery ];
		CreateFrame();
		CreatePlayer( player_pos );
		
		/*
		CreateEnemy( 64, 64, 250, 64, player_pos );
		wait( 120 );
		CreateEnemy( 300, 64, 64, 64, player_pos );
		wait( 120 );
		CreateEnemy( 32, 64, 250, 180, player_pos );
		wait( 120 );
		CreateEnemy( 250, 64, 64, 180, player_pos );
		*/
		
		
	}
	
	task Motion()
	{
		let eyex = 0;
		let eyey = 400;
		let eyez = -2056;
		let viewx = 0;
		let viewy = 0;
		let viewz = 0;
		let time = 0;
		
		loop
		{
			if( KeyDown( 33 ) )
			{
				eyey = eyey + 1;
			}
			else if( KeyDown( 34 ) )
			{
				eyey = eyey - 1;
			}
			
			eyez = eyez + 2;
			SetScore( eyez );
			viewz = eyez + 400;
			eyex = (1/2)*sin( 2*PI*(time/(6*60)) );
			time = time + 1;
			SetEyeView( eyex, eyey, eyez, viewx, viewy, viewz );
			if( eyez >= 0 )
			{
				eyez = -256*9/2 +256*9/3/2+eyez;
			}
			yield;
		}
	}

	function wait( let n )
	{
		loop( n ){ yield; }
	}
}